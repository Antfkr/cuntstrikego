Vector *__cdecl YawAA5(Vector *viewangles)
{
  int randn; // eax@1
  Vector *result; // eax@1
  signed __int64 randcopy; // rtt@1
  float v4; // xmm0_4@4
  float v5; // xmm0_4@6
  signed int v6; // [sp+8h] [bp-4h]@1

  randn = rand();
  randcopy = randn;
  result = (Vector *)(randn / 100);
  v6 = randcopy % 100;
  if ( v6 < 98 )
  {
    result = viewangles;
    viewangles[1].y = viewangles[1].y - 180.0;
  }
  if ( v6 < 15 )
  {
    v4 = viewangles[1].y + (float)(rand() % 141 - 70);
    result = viewangles;
    viewangles[1].y = v4;
  }
  if ( v6 == 69 )
  {
    v5 = viewangles[1].y + (float)(rand() % 181 - 90);
    result = viewangles;
    viewangles[1].y = v5;
  }
  return result;
}

char __cdecl YawAA6(Vector *viewangles) //fakesideways
{
  char result; // al@1

  viewangles[1].y = viewangles[1].y - 91.0;
  result = byte_100AFA99 == 0; //sendPacket
  byte_100AFA99 = result;
  if ( result )
  {
    result = (char)viewangles;
    viewangles[1].y = viewangles[1].y - 180.0;
  }
  return result;
}

Vector *__cdecl YawAA7(Vector *viewangles) //fakeforward
{
  Vector *result; // eax@1

  result = (Vector *)(unsigned __int8)sub_10004CA0((int)&ShouldSwap);
  if ( (_BYTE)result )
  {
    result = (Vector *)(unsigned __int8)byte_100AA52C;
    if ( byte_100AA52C )
    {
      result = viewangles;
      viewangles[1].y = viewangles[1].y + 0.0;
    }
    else
    {
      viewangles[1].y = viewangles[1].y + 180.0;
    }
  }
  else if ( ++dword_100AFAB8 == 1 )
  {
    byte_100AA52C = 0;
    result = viewangles;
    viewangles[1].y = viewangles[1].y + 180.0;
  }
  else
  {
    byte_100AA52C = 1;
    viewangles[1].y = viewangles[1].y + 0.0;
    dword_100AFAB8 = 0;
  }
  return result;
}

void __usercall YawAA8(int a1@<esi>, Vector *viewangles)
{
  double v2; // [sp+0h] [bp-Ch]@4

  if ( dword_100AFD14 > *(_DWORD *)(*(_DWORD *)(__readfsdword(44) + 4 * TlsIndex) + 4) )
  {
    sub_10086EEE(&dword_100AFD14);
    if ( dword_100AFD14 == -1 )
    {
      dword_100AFD04 = clock();
      sub_10086EAF(a1, &dword_100AFD14);
    }
  }
  v2 = (double)(clock() - dword_100AFD04) / 1000.0;
  if ( sub_10004CA0((int)&ShouldSwap) )
  {
    if ( byte_100AA52C )
    {
      if ( byte_100A8EBD )
        viewangles[1].y = viewangles[1].y - 90.0;
      else
        viewangles[1].y = viewangles[1].y + 90.0;
    }
    else
    {
      viewangles[1].y = viewangles[1].y - 180.0;
    }
  }
  else if ( ++dword_100AFAAC == 1 )
  {
    byte_100AA52C = 0;
    viewangles[1].y = viewangles[1].y - 180.0;
  }
  else
  {
    byte_100AA52C = 1;
    if ( byte_100A8EBD )
      viewangles[1].y = viewangles[1].y - 90.0;
    else
      viewangles[1].y = viewangles[1].y + 90.0;
    dword_100AFAAC = 0;
  }
  if ( v2 >= 0.35 )
  {
    byte_100A8EBD = byte_100A8EBD == 0;
    dword_100AFD04 = clock();
  }
}

char __cdecl YawAA9(Vector *viewangles)
{
  char result; // al@4

  if ( sub_10004CA0((int)&ShouldSwap) )
  {
    if ( byte_100AA52C )
    {
      if ( byte_100AFD00 )
        viewangles[1].y = viewangles[1].y - 226.0;
      else
        viewangles[1].y = viewangles[1].y - 134.0;
      result = byte_100AFD00 == 0;
      byte_100AFD00 = byte_100AFD00 == 0;
    }
    else
    {
      if ( byte_100AFD01 )
      {
        result = (char)viewangles;
        viewangles[1].y = viewangles[1].y - 134.0;
      }
      else
      {
        result = (char)viewangles;
        viewangles[1].y = viewangles[1].y - 226.0;
      }
      byte_100AFD01 = byte_100AFD01 == 0;
    }
  }
  else if ( ++dword_100AFABC == 1 )
  {
    byte_100AA52C = 0;
    if ( byte_100AFD09 )
    {
      result = (char)viewangles;
      viewangles[1].y = viewangles[1].y - 134.0;
    }
    else
    {
      result = (char)viewangles;
      viewangles[1].y = viewangles[1].y - 226.0;
    }
    byte_100AFD09 = byte_100AFD09 == 0;
  }
  else
  {
    byte_100AA52C = 1;
    if ( byte_100AFD08 )
      viewangles[1].y = viewangles[1].y - 226.0;
    else
      viewangles[1].y = viewangles[1].y - 134.0;
    result = byte_100AFD08 == 0;
    byte_100AFD08 = byte_100AFD08 == 0;
    dword_100AFABC = 0;
  }
  return result;
}
